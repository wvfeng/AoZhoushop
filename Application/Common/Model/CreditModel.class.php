<?php

namespace Common\Model;

/**
 * Class creditOrderModel
 * @package Mobile\Model
 * 用户模型库
 */

class CreditModel extends CommonModel
{
    protected $tableName = 'Credit_order';
    public $Credit_message;
    const TYPE = '退换货图片';

    protected $_link = [
        'shop'=> [
            'mapping_type'  => self::BELONGS_TO,
            'class_name'    => 'shop',
            'foreign_key'   => 's_id',
            'as_fields'     => 'price,tit,img'
        ],
    ];

    protected $_map = [
        'ShopID' => 's_id',
        'UserID' => 'u_id',
        'id'     => 'o_id',
    ];

    public function _before_insert(&$data, $options)
    {
        parent::_before_insert($data, $options); // TODO: Change the autogenerated stub
        $options = I('post.Images');
        if(!empty($options)){
            $path = C('__PATH_TUIHUAN__');
            foreach ($options as $Image){
                $imagename[] = uploadImg($Image,$path);
            }
            $data['images'] = implode(',',$imagename);
        }
        $data['create_time'] = time();
        $data['update_time'] = time();
    }

    public function _before_update(&$data, $options)
    {
        parent::_before_update($data, $options); // TODO: Change the autogenerated stub
        $data['update_time'] = time();
    }

    public function chedate(array $data){
        $where = ['s_id'=>$data['s_id'],'o_id'=>$data['o_id'],'u_id'=>$data['u_id'],'status'=>['in','未审核,通过,等待收货,正在退款,已退款']];
        $res = $this->where($where)->find();
        if(empty($res)){
            return true;
        }else{
            $this->Credit_message = $res['status'];
            return false;
        }
    }

    public function _after_insert($data, $options)
    {
        parent::_after_insert($data, $options); // TODO: Change the autogenerated stub
        $psth = C('__PATH_TUIHUAN__');
        $ImagesDB = D('Computer/Images');
        $images = $options['images'];
        if(empty($images)){
            $ImagesDB->commit();
        }elseif(is_array($images)){
            foreach ($images as $image){
                $imagepath = $this->uploadImg($image,$psth);
                $res[] = $ImagesDB->add(['type'=>static::TYPE,'z_id'=>$data[$this->pk],'resource'=>$imagepath]);
            }
            if(in_array(false,$res,true)){
                $ImagesDB->where(['type'=>static::TYPE,'z_id'=>$data[$this->pk]])->delete();
                $ImagesDB->rollback();
            }else{
                $ImagesDB->commit();
            }
        }else{
            return false;
        }
    }
}