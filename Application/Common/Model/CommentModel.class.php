<?php

namespace Common\Model;

/**
 * Class CommentModel
 * @package Computer\Model
 */
use Common\Controller\ShopController;

class CommentModel extends CommonModel
{
    const RT = 1;
    protected $trueTableName = 'mall_shop_comment';
    protected $Comment_pictures = [];

    protected $_auto = [
        ['create_time','time',self::MODEL_INSERT,'function'] , // 创建时间
        ['update_time','time',self::MODEL_BOTH,'function'] , // 更新时间
    ];

    protected $validate = [['shop_id','缺少商品ID！'],['order_id','缺少订单ID！']];

    public $Error = '';

    protected $_map = [
        'ShopID' => 'shop_id',
        'OrderID' => 'order_id',
    ];

    public function CommentAdd(ShopController $shop){
        $data = $this->create();
        $res = $this->checkdata($data);
        if($res === false) {
            $shop->message = $this->Error;
            return false;
        }
        $Order = M('Order')->field(['shop_id','type'])->where(['id'=>$data['order_id']])->find();
        $shop_id = $Order['shop_id'];
        if($Order['type'] != '待评论'){
            $shop->message = '订单状态错误！';
            return false;
        }elseif(empty($shop_id)){
            $shop->message = '订单不存在！';
            return false;
        }elseif(strpos($shop_id,$data['shop_id']) === false){
            $shop->message = '商品错误！';
            return false;
        }else{
            $shop_id = explode('|*|',$shop_id);
        }
        if(isset($data['star'])){
            if(is_numeric($data['star'])){
                if($data['star']<1){
                    $data['star'] = 1;
                }elseif ($data['star']>5){
                    $data['star'] = 5;
                }else{
                    $data['star'] = intval($data['star']);
                }
            }else{
                $data['star'] = 1;
            }
        }

        $data['user_id'] = $shop->userId;
        $res = $this->add($data);
        if($res !== false){
            $Comment_shop_id = $this->where(['order_id'=>$data['order_id'],'user_id'=>$shop->userId])->getField('shop_id',true);
            if(array_diff($shop_id,$Comment_shop_id) === []) M('Order')->where(['id'=>$data['order_id'],'type'=>'待评论'])->setField('type','已评价');
            return $res;
        }else{
            $shop->message = '未知错误';
            return false;
        }
    }

    public function checkdata($data){
        foreach ($this->validate as $item){
            if(!is_numeric($data[$item[0]])){
                $this->Error = $item[1];
                return false;
            }
        }
        return true;
    }

    public function CommentRemove(ShopController $shop){

        return $this->delete(I('post.CommentId',null));
    }

    public function commentList(ShopController $shop){
        $ShopID = I('get.ShopID',null);
        $where = [];
        if(is_null($ShopID)){
            $where = ['user_id'=>$shop->userId];
        }else{
            $where = ['shop_id'=>$ShopID];
        }
        if(empty($where)) return false;
        return $this->field('update_time',true)->where($where)->limit($shop->page())->select();
    }

//    public function CommentUpdate(ShopController $shop){
//        $data = $this->create();
//        $data['user_id'] = $shop->userId;
//        return $this->where(['id'=>I('post.CommentId',null)])->save(I('post.CommentId'));
//    }

    public function _after_insert($data, $options)
    {
        parent::_before_insert($data, $options); // TODO: Change the autogenerated stub
        if(isset($_FILES['Comment_pictures'])){
            $path = str_replace('//','/',C('__PATH_COMMENT__'));
            $files = $_FILES['Comment_pictures'];
            foreach ($files['name'] as $key=>$value){
                $images[] = [
                    'name'=>$files['name'][$key],
                    'type'=>$files['type'][$key],
                    'tmp_name'=>$files['tmp_name'][$key],
                    'error'=>$files['error'][$key],
                    'size'=>$files['size'][$key]
                ];
            }
            if(is_array($images)){
                foreach ($images as $picture){
                    $this->Comment_pictures[] = $this->uploadImage($picture,$path,true);
                }
            }else{
                $this->Comment_pictures = $this->uploadImage($images,$path,true);
            }
            $this->ImagePathSave($data[$this->pk]);
        }elseif(!empty($files = I('post.Comment_pictures'))){
            $path = str_replace('//','/',C('__PATH_COMMENT__').'/'.date('Ymd'));
            $tmp = explode(',',$files);
            $files = [];
            foreach ($tmp as $value){
                $files[] = array_shift($tmp).','.array_shift($tmp);
            }
            $images = array_filter($files);
            if(is_array($images)){
                foreach ($images as $picture){
                    $this->Comment_pictures[] = $this->uploadImg($picture,$path,true);
                }
            }else{
                $this->Comment_pictures = $this->uploadImg($images,$path,true);
            }
            $this->ImagePathSave($data[$this->pk]);
        }
    }

    public function ImagePathSave($z_id){
        $resource_Model = D('Computer/Images');
        if(is_array($this->Comment_pictures)){
            $resources = array_filter($this->Comment_pictures);
            foreach ($resources as $resource){
                $resource_Model->add(['z_id'=>$z_id,'type'=>self::RT,'resource'=>$resource]);
            }
        }else{
            $resource_Model->add(['z_id'=>$z_id,'type'=>self::RT,'resource'=>$this->Comment_pictures]);
        }
    }

    public function _after_delete($data, $options)
    {
        parent::_after_delete($data, $options); // TODO: Change the autogenerated stub
        D('Images')->where(['z_id'=>$data[$this->pk],'type'=>self::RT])->delete();
    }
}