<?php

namespace Computer\Model;

/**
 * Class CommentModel
 * @package Computer\Model
 */
use Computer\Controller\ShopController;

class CommentModel extends CommonModel
{
    const RT = 1;
    protected $trueTableName = 'mall_shop_comment';
    protected $Comment_pictures = [];
    protected $_map = [
        'ShopID' => 'shop_id',
    ];
    public function CommentAdd(ShopController $shop){
        $data = $this->create();
        if(isset($data['star'])){
            if(is_numeric($data['star'])){
                if($data['star']<1){
                    $data['star'] = 1;
                }elseif ($data['star']>5){
                    $data['star'] = 5;
                }else{
                    $data['star'] = intval($data['star']);
                }
            }else{
                $data['star'] = 1;
            }
        }
        $data['user_id'] = $shop->userId;
        return $this->add($data);
    }

    public function CommentRemove(ShopController $shop){

        return $this->delete(I('post.CommentId',null));
    }

    public function commentList(ShopController $shop){
        $ShopID = I('get.ShopID',null);
        $where = [];
        if(is_null($ShopID)){
            $where = ['user_id'=>$shop->userId];
        }else{
            $where = ['shop_id'=>$ShopID];
        }
        if(empty($where)) return false;
        $this->field('update_time',true)->where($where)->select();
        return $this->field('update_time',true)->where($where)->select();
    }

//    public function CommentUpdate(ShopController $shop){
//        $data = $this->create();
//        $data['user_id'] = $shop->userId;
//        return $this->where(['id'=>I('post.CommentId',null)])->save(I('post.CommentId'));
//    }

    public function _after_insert($data, $options)
    {
        parent::_before_insert($data, $options); // TODO: Change the autogenerated stub
        if(isset($_FILES['Comment_pictures'])){
            $path = C('__PATH_COMMENT__');
            $files = $_FILES['Comment_pictures'];
            foreach ($files['name'] as $key=>$value){
                $images[] = [
                    'name'=>$files['name'][$key],
                    'type'=>$files['type'][$key],
                    'tmp_name'=>$files['tmp_name'][$key],
                    'error'=>$files['error'][$key],
                    'size'=>$files['size'][$key]
                ];
            }
            if(is_array($images)){
                foreach ($images as $picture){
                    $this->Comment_pictures[] = $this->uploadImage($picture,$path,true);
                }
            }else{
                $this->Comment_pictures = $this->uploadImage($images,$path,true);
            }
            $resource_Model = D('Images');
            if(is_array($this->Comment_pictures)){
                $resources = array_filter($this->Comment_pictures);
                foreach ($resources as $resource){
                    $resource_Model->add(['z_id'=>$data[$this->pk],'type'=>self::RT,'resource'=>$resource]);
                }
            }else{
                $resource_Model->add(['z_id'=>$data[$this->pk],'type'=>self::RT,'resource'=>$this->Comment_pictures]);
            }
        }
    }

    public function _after_delete($data, $options)
    {
        parent::_after_delete($data, $options); // TODO: Change the autogenerated stub
        D('Images')->where(['z_id'=>$data[$this->pk],'type'=>self::RT])->delete();
    }

    public function _before_insert(&$data, $options)
    {
        parent::_before_insert($data, $options); // TODO: Change the autogenerated stub
        $data['create_time'] = $data['update_time'] = time();
    }

//    public function _before_update(&$data, $options)
//    {
//        parent::_before_update($data, $options); // TODO: Change the autogenerated stub
//        $data['update_time'] = time();
//    }
}